# Ship Information
<aside class="precaution">Some servers may consider some skins as NSFW content, if you are delivering a bot for a specific Discord server, please discuss how this should be implemented before designing</aside>

This section contains the results and functions developers need to use for fetching ship information. The name of the ship is implemented in game are provided in the payload returned on the right. But, developers should be able to provide their own error handling for misspelt names.

## Return Value
> The return value when fetched:

```ts
class Ship {
    wikiUrl: string;    // An valid, full url to its wiki page
    id: string;         // ID of ship, provided by the wiki (not in game id)
    names: {            // Ship's name
        code: string;
        en: string;
        cn?: string;
        jp?: string;
        kr?: string;
    };
    class: string;      // Ship's class
    nationality: string;// Ship's nationality
    hullType: string;   // Ship type (Destroyer etc)
    thumbnail: string;  // A thumbnail ideal for small places
    rarity: string;     // Super Rare, hopefully
    stars: {
        stars: string;      // i.e. ★★☆☆☆
        value: number;      // i.e. 2
    };

 //Retrofitted ships
  retrofit: Boolean;
  retrofitId: String;
  retrofitProjects: {
     Project Code (A-Z): {
        name: String,
        attributes: [
          "\"Health\" +45"
        ];
        materials: [
          "2x \"DestroyerT1BP\""
        ];
        coins: Number;
        level: Number;
        levelBreakLevel: Number;
        levelBreakStars: "★★☆☆☆";
        recurrence: Number;
        require: [
          "Required Projects",
          "A"
        ]
     }, "B": {...}
  };
  retrofit_hullType: String;
    stats: {
        baseStats: Stats;
        level100: Stats;
        level120: Stats;
        level100Retrofit?: Stats;
        level120Retrofit?: Stats;
    };
    slots: {
        1: Slot;
        2: Slot;
        3: Slot;
    };
    enhanceValue: object;// mapped by [key = "stat type", value = "enhance value"]
    scrapValue: {
        coin: number;
        oil: number;
        medal: number;
    };
    skills: Array<Skill>;
    limitBreaks: Array<Array<string>>;      // first layer = breaks, second layer = bonus
    fleetTech: {                            // fleet tech stuff
        statsBonus: {
            collection: {                   // on collection
                applicable: Array<string>;  // applicable ship types (i.e. Destroyer)
                stat: string;               // name of stat to enhance
                bonus: string;              // human-readable version of how much to enhance
            };
            maxLevel: {                     // on reaching max-level
                applicable: Array<string>;
                stat: string;
                bonus: string;
            };
        };
        techPoints: {
            collection: number;
            maxLimitBreak: number;
            maxLevel: number;
            total: number;
        };
    };
    construction: {
        constructionTime: string;
        availableIn: {
            light: Boolean;
            heavy: Boolean;
            aviation: Boolean;
            limited: Boolean;
            exchange: Boolean;
        };
    };
    misc: {
        artist: string;
        web?: Artist;
        pixiv?: Artist;
        twitter?: Artist;
        voice?: Artist;
    };
}
```

### Misc Data

<div class="center-column"></div>

```ts
class Artist {
    name: string;
    url: string;
}
```


### Slot Data

<div class="center-column"></div>

```ts
class Slot {
    type: string;
    minEfficiency: number;  // in percentage
    maxEfficiency: number;  // in percentage
}
```

### Ship Statistics

<div class="center-column"></div>

```ts
{
  class Stats {
      health: string;
      armor: string;
      reload: string;
      luck: string;
      firepower: string;
      torpedo: string;
      evasion: string;
      speed: string;
      antiair: string;
      aviation: string;
      oilConsumption: string;
      accuracy: string;
      antisubmarineWarfare: string;
      // For submarines
      oxygen?: string;
      ammunition?: string;
      huntingRange?: Array<Array<string>>; // hunting range represented by 2d array
  }
}
```
### Skill Data

<div class="center-column"></div>

```ts
{
  class Skill {
      icon: string;       // url
      names: {
          en?: string;
          cn?: string;
          jp?: string;
          kr?: string;
      };
      description: string;
      color: string;      // descriptive color name (not hex code)
  }
}
```

## Query by name

```javascript
client.ship.get(`<String>`) // Get ship by ID or name in any language
client.ships.getAll(/*STRING (query)*/); // QUERY EVERYTHING
client.ship.name(`<String>`) // Get ship by name in any language
client.ship.name(`<String>`,`< en || cn || jp || kr >`) // Get ship by name in a specific language only
```

<aside class="notice">Please note that only multilingual support auto queries by what language it was assigned to.</aside>


## Query by ID

```javascript
client.ship.get(`<String>`) // Get ship by ID or name in any language
client.ships.getAll(/*STRING (query)*/); // QUERY EVERYTHING
client.ship.id(`<String>`) // Get ship using ID
```
```python

```
```kotlin

```
```csharp

```

This is the different types of IDs avaliable to people to select, have a look at this table and allow what your app needs.

| Types                        | Examples    |
|------------------------------|-------------|
| Normal                       | "001"       |
| Unreleased/Retrofitted Ships | "3005"      |
| Research Ships               | "Plan001"   |
| Collabouration Ships         | "Collab001" |

There are 3 ways to implement Quary by ID. We highly recommended to use ship.get as it combines the use of ID and Ship Quary capabiility. But, it is highly recommanded to default back to ship.id if you are going to only Query by ID as getShip will default to query by Name first before query by ID
