# Ship Information
<aside class="precaution">Some servers may consider some skins as NSFW content, if you are delivering a bot for a specific Discord server, please discuss how this should be implemented before designing</aside>

This section contains the results and functions developers need to use for fetching ship information. The name of the ship is implemented in game are provided in the payload returned on the right. But, developers should be able to provide their own error handling for misspelt names.

## Return Value
> The return value when fetched:

```ts
export class Ship {
  wikiUrl: Url;    // An valid, full url to its wiki page
  id: ShipID;         // ID of ship, provided by the wiki (not in game id)
  names: ShipNames;
  thumbnail: Url;
  hexagon: [number, number, number, number, number, number];
  class: string;      // Ship's class
  nationality: string;// Ship's nationality
  hullType: string;   // Ship type (Destroyer etc)
  rarity: Rarity;     // Super Rare, hopefully
  stars: {
    stars: string;
    value: number;
  };
  stats: ShipStats;
  slots: [Slot, Slot, Slot];
  enhanceValue: { firepower: number, torpedo: number, aviation: number, reload: number };
  scrapValue: {
    coin: number;
    oil: number;
    medal: number;
  };
  skills: Skill[];
  skins: Skin[];
  gallery: GalleryItem[];
  limitBreaks: LimitBreak[];      // first layer = breaks, second layer = bonus
  devLevels: DevLevel[]
  fleetTech: FleetTech;
  unreleased?: boolean;
  retrofit: boolean;                              // if the ship is retrofittable
  retrofitId: string;                             // the id after retrofit
  retrofitHullType: string;                       // if the ship changes type
  retrofitProjects: { [id: string]: RetrofitProject };
  construction: {
    constructionTime: string;
    availableIn: {
      light: boolean;
      heavy: boolean;
      aviation: boolean;
      limited: boolean;
      exchange: boolean;
    };
  };
  obtainedFrom: {
    obtainedFrom?: string;       // source, etc "Available in Medal Exchange for \"Medal\" 80."
    fromMaps: string[];    // map ids, etc "1-1" "10-2"
  };
  misc: {
    artist?: Artist;
    web?: Artist;
    pixiv?: Artist;
    twitter?: Artist;
    voice?: Artist;
  };
}

export type ShipNames = {            // Ship's name
  code: string;
  en: string;
  cn: string;
  jp: string;
  kr: string;
};

export type ShipStats = {
  baseStats: Stats;
  level100: Stats;
  level120: Stats;
  level100Retrofit?: Stats;
  level120Retrofit?: Stats;
};

export type FleetTech = {                            // fleet tech stuff
  statsBonus: {
    collection?: Bonus;
    maxLevel?: Bonus;
  };
  techPoints: {
    collection: number;
    maxLimitBreak: number;
    maxLevel: number;
    total: number;
  };
};

export type RetrofitProject = {
  id: ProjectID;
  grade: string;
  attributes: string[];
  materials: string[];
  coins: number;
  level: number;
  levelBreakLevel: number;
  levelBreakStars: string;
  recurrence: number;
  require: ProjectID[];
}

export interface Skin {
  name: string;
  chibi: Url;
  image: Url;
  cn?: Url; // censored
  bg?: Url; // with background
  nobg?: Url; // without background (only used internally)
  background: Url; // scenery background
  info: SkinInfo;
}

export type SkinInfo = {
  enClient?: string;
  cnClient?: string;
  jpClient?: string;
  cost?: number;
  obtainedFrom: string;
  live2dModel: boolean;
};
```

### Bonus Data

<div class="center-column"></div>

```ts
export type Bonus = {                  // on collection
  applicable: string[];  // applicable ship types (i.e. Destroyer)
  stat: Stat;                 // name of stat to enhance
  bonus: string;              // human-readable version of how much to enhance
};
```

### Ship Statistics

<div class="center-column"></div>

```ts
export type Slot {
    [k in Stat]?: string;
  }
```

### Slot Statistics

<div class="center-column"></div>

```ts
export type Slot = {
  type: string;
  kaiEfficiency?: number;
  minEfficiency: number;
  maxEfficiency: number;
}
```

### Skill Data

<div class="center-column"></div>

```ts
export type Skill = {
      icon: string;       // url
      names: {
          en?: string;
          cn?: string;
          jp?: string;
          kr?: string;
      };
      description: string;
      color: string;      // descriptive color name (not hex code)
  }
```

### Gallery Data

<div class="center-column"></div>

```ts
export type GalleryItem = {
  description: string;    // self-explanatory
  url: Url;            // the image url
}
```

### Artist Data

<div class="center-column"></div>

```ts
export type Artist = {
  name: string;
  url: Url;
}
```

### Project ID

<div class="center-column"></div>

```ts
export type ProjectID = string;
```

### Dev Level Data

<div class="center-column"></div>

```ts
export type DevLevel = {
  level: string;
  buffs: string[];
}
```
## Raw Data
```javascript
client.ships.raw(); // RAW SHIP DATABASE IN JSON
```
```csharp
var ships = client.ship.all; // all ships
```
## Query by name

```javascript
client.ship.get(`<String>`) // Get ship by ID or name in any language
client.ships.getAll(/*STRING (query)*/); // QUERY EVERYTHING
client.ship.name(`<String>`) // Get ship by name in any language
client.ship.name(`<String>`,`< en || cn || jp || kr >`) // Get ship by name in a specific language only
```
```csharp
client.ship.get("takao"); // Get ship by ID or name in any language
client.ship.name("takao"); // Get ship by name in any language
// get ship by name in specific language
// one of "en", "jp", "cn" or "kr"
client.ship.name("takao", "en");
```

<aside class="notice">Please note that only multilingual support auto queries by what language it was assigned to.</aside>


## Query by ID

```javascript
client.ship.get(`<String>`) // Get ship by ID or name in any language
client.ships.getAll(/*STRING (query)*/); // QUERY EVERYTHING
client.ship.id(`<String>`) // Get ship using ID
```
```python

```
```kotlin

```
```csharp
client.ship.id("200");
```

This is the different types of IDs avaliable to people to select, have a look at this table and allow what your app needs.

| Types                        | Examples    |
|------------------------------|-------------|
| Normal                       | "001"       |
| Unreleased/Retrofitted Ships | "3005"      |
| Research Ships               | "Plan001"   |
| Collabouration Ships         | "Collab001" |

There are 3 ways to implement Quary by ID. We highly recommended to use ship.get as it combines the use of ID and Ship Quary capabiility. But, it is highly recommanded to default back to ship.id if you are going to only Query by ID as getShip will default to query by Name first before query by ID
